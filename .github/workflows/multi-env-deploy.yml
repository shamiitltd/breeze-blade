name: Deploy application in multi-env

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch: # Manually run this workflow

jobs:
  CLEANING-READY:
    name: Clean Ready
    runs-on: ubuntu-latest
    environment: CLEAN
    steps:
      - name: Cleaning Permission okay
        run: echo "Cleaning ready"
  CLEANING:
    name: Clean ${{ matrix.environment }}
    runs-on: ubuntu-latest
    environment: ${{ matrix.environment }}
    needs: CLEANING-READY
    strategy:
      matrix:
        environment:
          - TEST
          - QA
          - PROD
    steps:
      - name: Cleaning ${{ matrix.environment }} ftp server
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            [ "$(basename "$(pwd)")" = "${{ secrets.FTP_SERVER }}" ] && rm -rf ./*
          EOF


  BUILD:
    name: Build code
    runs-on: ubuntu-latest
    steps:
      - name: Get the latest code
        uses: actions/checkout@v3

      - name: Setup PHP 8.1
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - uses: actions/setup-node@master
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18 # You can specify the Node.js version you need

      - name: Install dependencies
        run: npm install

      - name: Build with Vite
        run: npm run build # Use the appropriate build script from your package.json

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: composer update --ignore-platform-reqs

      - name: Prepare .env file
        run: |
          sed -i "s/DB_DATABASE=.*/DB_DATABASE=${DATABASE}/" .env
          sed -i "s/DB_USERNAME=.*/DB_USERNAME=${USERNAME}/" .env
          sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=${PASSWORD}/" .env

      - name: Generate key
        run: php artisan key:generate

      - name: Zip Repository
        run: |
          zip -r release.zip .
        working-directory: ${{ github.workspace }}

      - name: Upload ZIP Artifact
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: release.zip
          retention-days: 10


  DEVELOPMENT:
    name: Deploy in TEST
    runs-on: ubuntu-latest
    environment: TEST
    needs: BUILD
    steps:
      - name: Download ZIP Artifact
        uses: actions/download-artifact@v3
        with:
          name: release
          path: release

      - name: ðŸ“‚ Sync files
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./release/
          exclude: |
            **/.git*
            **/.git*/**

      - name: SSH into the server and unzip release.zip
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            yes | unzip release.zip -d release
          EOF
      - name: Copy .env.example and .env, .htaccess from release directory only for php
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            cp release/.env.example .env.example
            cp release/.env .env
            cp release/.htaccess .htaccess
            rsync -av release/ . #recursively copy files
          EOF
          
      - name: Remove the 'release' directory and .zip
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            rm -rf release
            rm -rf .git
            rm release.zip
          EOF

  QUALITYANALYSIS:
    name: Deploy in QA
    runs-on: ubuntu-latest
    environment: QA
    needs: DEVELOPMENT
    steps:
      - name: Download ZIP Artifact
        uses: actions/download-artifact@v3
        with:
          name: release
          path: release

      - name: ðŸ“‚ Sync files
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./release/
          exclude: |
            **/.git*
            **/.git*/**

      - name: SSH into the server and unzip release.zip
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            yes | unzip release.zip -d release
          EOF
      - name: Copy .env.example and .env, .htaccess from release directory only for php
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            cp release/.env.example .env.example
            cp release/.env .env
            cp release/.htaccess .htaccess
            rsync -av release/ . #recursively copy files
          EOF
          
      - name: Remove the 'release' directory and .zip
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            rm -rf release
            rm -rf .git
            rm release.zip
          EOF

  PRODUCTION:
    name: Deploy in PROD
    runs-on: ubuntu-latest
    environment: PROD    
    needs: QUALITYANALYSIS
    steps:
      - name: Download ZIP Artifact
        uses: actions/download-artifact@v3
        with:
          name: release
          path: release

      - name: ðŸ“‚ Sync files
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./release/
          exclude: |
            **/.git*
            **/.git*/**

      - name: SSH into the server and unzip release.zip
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            yes | unzip release.zip -d release
          EOF
      - name: Copy .env.example and .env, .htaccess from release directory only for php
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            cp release/.env.example .env.example
            cp release/.env .env
            cp release/.htaccess .htaccess
            rsync -av release/ . #recursively copy files
          EOF
          
      - name: Remove the 'release' directory and .zip
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            rm -rf release
            rm -rf .git
            rm release.zip
          EOF
            
  MIGRATION-READY:
    name: Migration Ready
    runs-on: ubuntu-latest
    environment: MIGRATE
    steps:
      - name: Migration Permission okay
        run: echo "Migrate ready"
  MIGRATION:
    name: Migration in ${{ matrix.environment }}
    runs-on: ubuntu-latest
    environment: ${{ matrix.environment }}
    needs: MIGRATION-READY
    strategy:
      matrix:
        environment:
          - TEST
          - QA
          - PROD
    steps:
      - name: Migrating the Database in ${{ matrix.environment }}
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            php artisan migrate:fresh --force
          EOF

